[1/12] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D "D:\ESP\ESP project\fingerprint\build\bootloader\esp-idf\esptool_py" && D:\ESP\ESP\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe D:/ESP/ESP/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 "D:/ESP/ESP project/fingerprint/build/bootloader/bootloader.bin""
Bootloader binary size 0x6860 bytes. 0x7a0 bytes (7%) free.
[2/10] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/main.c.obj
[3/10] Building C object esp-idf/handle_password/CMakeFiles/__idf_handle_password.dir/handle_password.c.obj
[4/10] Linking C static library esp-idf\handle_password\libhandle_password.a
[5/10] Linking C static library esp-idf\main\libmain.a
[6/10] Generating ld/sections.ld
[7/10] Linking CXX executable fingerprint.elf
[8/10] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated D:/ESP/ESP project/fingerprint/build/fingerprint.bin
[9/10] cmd.exe /C "cd /D "D:\ESP\ESP project\fingerprint\build\esp-idf\esptool_py" && D:\ESP\ESP\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe D:/ESP/ESP/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app "D:/ESP/ESP project/fingerprint/build/partition_table/partition-table.bin" "D:/ESP/ESP project/fingerprint/build/fingerprint.bin""
fingerprint.bin binary size 0x32b60 bytes. Smallest app partition is 0x100000 bytes. 0xcd4a0 bytes (80%) free.
[9/10] cmd.exe /C "cd /D D:\ESP\ESP\Espressif\frameworks\esp-idf-v5.2.2\components\esptool_py && D:\ESP\ESP\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=D:/ESP/ESP/Espressif/frameworks/esp-idf-v5.2.2 -D SERIAL_TOOL=D:/ESP/ESP/Espressif/python_env/idf5.2_py3.11_env/Scripts/python.exe;;D:/ESP/ESP/Espressif/frameworks/esp-idf-v5.2.2/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=default_reset;--after=haesptool.py --chip esp32 -p COM5 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 40m --flash_size 4MB 0x1000 bootloader/bootloader.bin 0x10000 fingerprint.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM5
Connecting......
Chip is ESP32-D0WD-V3 (revision v3.1)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: cc:7b:5c:28:c2:a8
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x00042fff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26720 bytes to 16351...
Writing at 0x00001000... (100 %)
Wrote 26720 bytes (16351 compressed) at 0x00001000 in 0.8 seconds (effective 281.4 kbit/s)...
Hash of data verified.
Compressed 207712 bytes to 110817...
Writing at 0x00010000... (14 %)
Writing at 0x0001d2b5... (28 %)
Writing at 0x000231ae... (42 %)
Writing at 0x00029104... (57 %)
Writing at 0x0002f6a3... (71 %)
Writing at 0x00037c93... (85 %)
Writing at 0x0003daeb... (100 %)
Wrote 207712 bytes (110817 compressed) at 0x00010000 in 2.9 seconds (effective 580.9 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.0 seconds (effective 495.9 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
rd_reset;write_flash;@flash_args -D "WORKING_DIRECTORY=D:/ESP/ESP project/fingerprint/build" -P D:/ESP/ESP/Espressif/frameworks/esp-idf-v5.2.2/components/esptool_py/run_serial_tool.cmake"
